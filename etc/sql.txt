create table semiProject.member(
member_index int not null unique,
member_id varchar(50) primary key unique,
member_pwd varchar(50) not null,
member_nickname varchar(50) not null unique,
member_email varchar(50) not null unique,
member_point int default 100,
member_regdate timestamp not null,
member_phone varchar(50) not null,
prefer_game1 varchar(50) default null,
prefer_game2 varchar(50) default null,
prefer_game3 varchar(50) default null
member_profile varchar(2000)
);

create table free_board(
board_type varchar(50) not null,
board_index int primary key,
board_title varchar(100) not null,
board_cont varchar(10000),
board_writer_id varchar(50) not null,
 FOREIGN KEY (board_writer_id) REFERENCES
 member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
board_writer_nickname varchar(50) not null,
 FOREIGN KEY (board_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
upload_file varchar(2000),
upload_fileImg varchar(2000),
board_heading varchar(50) not null,
board_hit int default 0,
board_thumbs int default 0,
board_date timestamp not null,
board_update timestamp
);

create table legend_board(
board_type varchar(50) not null,
board_index int primary key,
board_title varchar(100) not null,
board_cont varchar(10000),
board_writer_id varchar(50) not null,
 FOREIGN KEY (board_writer_id) REFERENCES
 member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
board_writer_nickname varchar(50) not null,
 FOREIGN KEY (board_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
upload_file varchar(2000),
upload_fileImg varchar(2000),
board_heading varchar(50) not null,
board_hit int default 0,
board_thumbs int default 0,
board_date timestamp not null,
board_update timestamp
);

create table notice_board(
board_type varchar(50) not null,
board_index int primary key,
board_title varchar(100) not null,
board_cont varchar(10000),
board_writer_id varchar(50) not null,
 FOREIGN KEY (board_writer_id) REFERENCES
 member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
board_writer_nickname varchar(50) not null,
 FOREIGN KEY (board_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
upload_file varchar(2000),
upload_fileImg varchar(2000),
board_heading varchar(50) not null,
board_hit int default 0,
board_thumbs int default 0,
board_date timestamp not null,
board_update timestamp
);


create table etc_board(
board_type varchar(50) not null,
board_index int primary key,
board_title varchar(100) not null,
board_cont varchar(10000),
board_writer_id varchar(50) not null,
 FOREIGN KEY (board_writer_id) REFERENCES
 member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
board_writer_nickname varchar(50) not null,
 FOREIGN KEY (board_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
upload_file varchar(2000),
upload_fileImg varchar(2000),
board_heading varchar(50) not null,
board_hit int default 0,
board_thumbs int default 0,
board_date timestamp not null,
board_update timestamp
);

create table free_comment(
comment_index int primary key,
board_comment_index int not null,
FOREIGN KEY (board_comment_index) REFERENCES
free_board(board_index) ON UPDATE CASCADE ON DELETE CASCADE,
comment_cont varchar(5000),
comment_writer_id varchar(50) not null,
FOREIGN KEY (comment_writer_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
comment_writer_nickname varchar(50) not null,
FOREIGN KEY (comment_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
comment_date timestamp not null,
comment_update timestamp,
comment_hit int default 0
);


create table legend_comment(
comment_index int primary key,
board_comment_index int not null,
FOREIGN KEY (board_comment_index) REFERENCES
legend_board(board_index) ON UPDATE CASCADE ON DELETE CASCADE,
comment_cont varchar(5000),
comment_writer_id varchar(50) not null,
FOREIGN KEY (comment_writer_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
comment_writer_nickname varchar(50) not null,
FOREIGN KEY (comment_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
comment_date timestamp not null,
comment_update timestamp,
comment_hit int default 0
);


create table notice_comment(
free_commentcomment_index int primary key,
board_comment_index int not null,
FOREIGN KEY (board_comment_index) REFERENCES
notice_board(board_index) ON UPDATE CASCADE ON DELETE CASCADE,
comment_cont varchar(5000),
comment_writer_id varchar(50) not null,
FOREIGN KEY (comment_writer_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
comment_writer_nickname varchar(50) not null,
FOREIGN KEY (comment_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
comment_date timestamp not null,
comment_update timestamp,
comment_hit int default 0
);

create table etc_comment(
comment_index int primary key,
board_comment_index int not null,
FOREIGN KEY (board_comment_index) REFERENCES
etc_board(board_index) ON UPDATE CASCADE ON DELETE CASCADE,
comment_cont varchar(5000),
comment_writer_id varchar(50) not null,
FOREIGN KEY (comment_writer_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
comment_writer_nickname varchar(50) not null,
FOREIGN KEY (comment_writer_nickname) REFERENCES
 member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
comment_date timestamp not null,
comment_update timestamp,
comment_hit int default 0
);


create table matching(
matched varchar(50) default 0,
accept varchar(50) default 0,
game_name varchar(50) not null,
tier varchar(50) not null,
matching_user_id varchar(50) primary key,
matching_user_nickname varchar(50) unique not null,
discord_nickname varchar(50) unique,
kakao_id varchar(50) unique,
matching_regdate timestamp
);

create table matching(
matched varchar(50) default 0,
accept varchar(50) default 0,
game_name varchar(50) not null,
tier varchar(50) not null,
matching_user_id varchar(50) primary key,
FOREIGN KEY (matching_user_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
matching_user_nickname varchar(50) unique not null,
FOREIGN KEY (matching_user_nickname) REFERENCES
member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
discord_nickname varchar(50),
kakao_id varchar(50),
matching_regdate timestamp
);

create table matching(
matched varchar(50) default 0,
accept varchar(50) default 0,
game_name varchar(50) not null,
tier varchar(50) not null,
matching_user_id varchar(50) primary key,
FOREIGN KEY (matching_user_id) REFERENCES
member(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
matching_user_nickname varchar(50) unique not null,
FOREIGN KEY (matching_user_nickname) REFERENCES
member(member_nickname) ON UPDATE CASCADE ON DELETE CASCADE,
discord_nickname varchar(50) default null,
kakao_id varchar(50) default null,
matching_regdate timestamp
);

'2', 'admin', '1234!Q', '관리자1', 'admin@naver.com', '100', '2023-04-25 01:30:41', '010-7777-7890', 'lol', '', '', ''
